AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-sam-dynamodb-api

  SAM Template for Skills API

Parameters:
  AppName:
    Type: String
    Description: Name of the application
    Default: "dynamodb-skills"
  ClientDomains:
    Type: CommaDelimitedList
    Description: Array of domains allowed to use this UserPool
    Default: "http://localhost:8080,https://dan-mba.github.io"

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: python3.8
    CodeUri: dynamodb/

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool 
    Properties: 
      UserPoolName: !Sub ${AppName}-UserPool 
      Policies: 
        PasswordPolicy: 
          MinimumLength: 8
      AutoVerifiedAttributes:
        - email
      UsernameAttributes: 
        - email
      Schema: 
        - AttributeDataType: String 
          Name: email 
          Required: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient 
    Properties: 
      UserPoolId: !Ref UserPool 
      ClientName: !Sub ${AppName}-UserPoolClient 
      GenerateSecret: false # set to false for web clients
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs: !Ref ClientDomains
      LogoutURLs: !Ref ClientDomains
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit #for testing with postman
      AllowedOAuthScopes:
        - email
        - openid
        - profile

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Sub ${AppName}-${AWS::AccountId}
      UserPoolId: !Ref UserPool

  ApiResource:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        DefaultAuthorizer: GeneralAuth
        Authorizers:
          GeneralAuth:
            AuthorizationScopes:
              - email
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
              audience:
                - !Ref UserPoolClient
      CorsConfiguration:
        AllowCredentials: true
        AllowHeaders:
          - Authorization
          - "*"
        AllowMethods:
          - get
          - put
          - post
          - delete
          - options
        AllowOrigins:
          - http://localhost:8080
          - https://dan-mba.github.io

  GetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SkillsTable
      Events:
        GetOne:
          Type: HttpApi
          Properties:
            Path: /Skills/{userid}/{rating}
            Method: get
            ApiId: !Ref ApiResource
        GetAll:
          Type: HttpApi
          Properties:
            Path: /Skills/{userid}
            Method: get
            ApiId: !Ref ApiResource
  PutFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: put.lambda_handler
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref SkillsTable
      Events:
        Put:
          Type: HttpApi
          Properties:
            Path: /Skills
            Method: put
            ApiId: !Ref ApiResource
  
  PostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: post.lambda_handler
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref SkillsTable
      Events:
        Post:
          Type: HttpApi
          Properties:
            Path: /Skills
            Method: post
            ApiId: !Ref ApiResource

  DeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: delete.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SkillsTable
      Events:
        Delete:
          Type: HttpApi
          Properties:
            Path: /Skills
            Method: delete
            ApiId: !Ref ApiResource

  SkillsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: userid
          AttributeType: S
        - AttributeName: rating
          AttributeType: N
      KeySchema:
        - AttributeName: userid
          KeyType: HASH
        - AttributeName: rating
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: Skills

Outputs:
  DynamoDbApi:
    Description: "API Gateway endpoint URL for Prod stage for Skills API function"
    Value: !Sub "https://${ApiResource}.execute-api.${AWS::Region}.amazonaws.com/Skills/"
